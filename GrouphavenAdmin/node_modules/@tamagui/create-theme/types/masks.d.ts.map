{
  "mappings": "AAAA,cAAc,YAAY,cAAc,mBAAmB,oBAAoB;AAI/E,OAAO,cAAM,aAAc,UAAU,aAAa,cAChDA,YAAY,MACX;AAKH,OAAO,cAAMC,UAAU;AA8CvB,OAAO,cAAM,0BAAyB;AAKtC,OAAO,cAAM,yBAAwB;KAahC,mBAAmB,EAAE,kBAAmB;AAE7C,OAAO,cAAM,kBACX,EAAE,SAA2B,GAAhB,kBACbC,iBAAiB,gBAChB;AA6CH,OAAO,cAAM,mBAAoBA,iBAAiB,gBAAc;AAKhE,OAAO,cAAMC,mBAAmBD,iBAAiB,gBAAgB;AAGjE,OAAO,cAAM,uBAAwBA,iBAAiB,gBAAc",
  "names": [
    "createMask: C",
    "skipMask: CreateMask",
    "defaultOptions?: MaskOptions",
    "createSoftenMask: (defaultOptions?: MaskOptions) => CreateMask"
  ],
  "sources": [
    "src/masks.tsx"
  ],
  "sourcesContent": [
    "import type { CreateMask, MaskFunction, MaskOptions } from './createThemeTypes'\nimport { objectEntries, objectFromEntries } from './helpers'\nimport { isMinusZero } from './isMinusZero'\n\nexport const createMask = <C extends CreateMask | MaskFunction>(\n  createMask: C\n): CreateMask =>\n  typeof createMask === 'function'\n    ? { name: createMask.name || 'unnamed', mask: createMask }\n    : createMask\n\nexport const skipMask: CreateMask = {\n  name: 'skip-mask',\n  mask: (template, opts) => {\n    const { skip } = opts\n    const result = Object.fromEntries(\n      Object.entries(template)\n        .filter(([k]) => !skip || !(k in skip))\n        .map(([k, v]) => [k, applyOverrides(k, v, opts)])\n    ) as typeof template\n\n    return result\n  },\n}\n\nfunction applyOverrides(key: string, value: number | string, opts: MaskOptions) {\n  let override: string | number | undefined\n  let strategy = opts.overrideStrategy\n\n  const overrideSwap = opts.overrideSwap?.[key]\n  if (typeof overrideSwap !== 'undefined') {\n    override = overrideSwap\n    strategy = 'swap'\n  } else {\n    const overrideShift = opts.overrideShift?.[key]\n    if (typeof overrideShift !== 'undefined') {\n      override = overrideShift\n      strategy = 'shift'\n    } else {\n      const overrideDefault = opts.override?.[key]\n      if (typeof overrideDefault !== 'undefined') {\n        override = overrideDefault\n        strategy = opts.overrideStrategy\n      }\n    }\n  }\n\n  if (typeof override === 'undefined') return value\n  if (typeof override === 'string') return value\n\n  if (strategy === 'swap') {\n    return override\n  }\n\n  return value\n}\n\nexport const createIdentityMask = (): CreateMask => ({\n  name: 'identity-mask',\n  mask: (template, opts) => skipMask.mask(template, opts),\n})\n\nexport const createInverseMask = (): CreateMask => {\n  const mask: CreateMask = {\n    name: 'inverse-mask',\n    mask: (template, opts) => {\n      const inversed = objectFromEntries(\n        objectEntries(template).map(([k, v]) => [k, -v])\n      ) as any\n      return skipMask.mask(inversed, opts)\n    },\n  }\n  return mask\n}\n\ntype ShiftMaskOptions = { inverse?: boolean }\n\nexport const createShiftMask = (\n  { inverse }: ShiftMaskOptions = {},\n  defaultOptions?: MaskOptions\n): CreateMask => {\n  const mask: CreateMask = {\n    name: 'shift-mask',\n    mask: (template, opts) => {\n      const {\n        override,\n        overrideStrategy = 'shift',\n        max: maxIn,\n        palette,\n        min = 0,\n        strength = 1,\n      } = { ...defaultOptions, ...opts }\n      const values = Object.entries(template)\n      const max =\n        maxIn ?? (palette ? Object.values(palette).length - 1 : Number.POSITIVE_INFINITY)\n      const out = {}\n      for (const [key, value] of values) {\n        if (typeof value === 'string') continue\n        if (typeof override?.[key] === 'number') {\n          const overrideVal = override[key] as number\n          out[key] = overrideStrategy === 'shift' ? value + overrideVal : overrideVal\n          continue\n        }\n        if (typeof override?.[key] === 'string') {\n          out[key] = override[key]\n          continue\n        }\n        const isPositive = value === 0 ? !isMinusZero(value) : value >= 0\n        const direction = isPositive ? 1 : -1\n        const invert = inverse ? -1 : 1\n        const next = value + strength * direction * invert\n        const clamped = isPositive\n          ? Math.max(min, Math.min(max, next))\n          : Math.min(-min, Math.max(-max, next))\n\n        out[key] = clamped\n      }\n\n      const skipped = skipMask.mask(out, opts) as typeof template\n      return skipped\n    },\n  }\n  return mask\n}\n\nexport const createWeakenMask = (defaultOptions?: MaskOptions): CreateMask => ({\n  name: 'soften-mask',\n  mask: createShiftMask({}, defaultOptions).mask,\n})\n\nexport const createSoftenMask: (defaultOptions?: MaskOptions) => CreateMask =\n  createWeakenMask\n\nexport const createStrengthenMask = (defaultOptions?: MaskOptions): CreateMask => ({\n  name: 'strengthen-mask',\n  mask: createShiftMask({ inverse: true }, defaultOptions).mask,\n})\n"
  ],
  "version": 3
}