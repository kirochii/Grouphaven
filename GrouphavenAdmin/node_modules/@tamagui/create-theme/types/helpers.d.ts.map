{
  "mappings": "KAAK,aAAa,OAAO;KAEpB;CAAY;CAAO;IACtB,KAAK,UAAU,WAAW,SAAQ,MAAM,WAAW,UAAU,kBAAkB;KAE5E,cAAc,YACd,WAAW,gBAAe,YAAY,OAAO,MAAM,KAAK,MAAM,YAAY;AAE/E,OAAO,cAAM,aAAc,UAAU,QAAQA,KAAK,MAA0B,YAAY;AAExF,OAAO,iBAAS,cAAc,cAAc,YAC1CC,KAAK,QACJ,cAAc;KAIZ,eACA,0BACD,wBAAwB;KAGvB,aAAa,sBAAsB,WAAW,SAAQ,aAAa,MAAM;KACzE,oBAAoB,YACtB,uBAAuBC,GAAG,mCAAmCC,SAAS,aACnE;KAID,4BAA4B,cAAc,eAC7C,aAAa,sBAAsB,OAC/B,iBAAiB,WAAW,UACvB,QAAQ,MAAM,eAAc;KAGlC,yBAAyB,WAAW,aAAa,QAAO,KAAK;KAC7D,gBAAgB,cAAc,eAAe,yBAChD,oBAAoB,4BAA4B;AAGlD,OAAO,iBAAS,kBAAkB,cAAc,aAC9CC,KAAK,QACJ,gBAAgB",
  "names": [
    "obj: O",
    "obj: OBJ_T",
    "k: UNION_T",
    "k: infer I",
    "arr: ARR_T"
  ],
  "sources": [
    "src/helpers.tsx"
  ],
  "sourcesContent": [
    "type ObjectType = Record<PropertyKey, unknown>\n\ntype PickByValue<OBJ_T, VALUE_T> = // From https://stackoverflow.com/a/55153000\n  Pick<OBJ_T, { [K in keyof OBJ_T]: OBJ_T[K] extends VALUE_T ? K : never }[keyof OBJ_T]>\n\ntype ObjectEntries<OBJ_T> = // From https://stackoverflow.com/a/60142095\n  { [K in keyof OBJ_T]: [keyof PickByValue<OBJ_T, OBJ_T[K]>, OBJ_T[K]] }[keyof OBJ_T][]\n\nexport const objectKeys = <O extends Object>(obj: O) => Object.keys(obj) as Array<keyof O>\n\nexport function objectEntries<OBJ_T extends ObjectType>(\n  obj: OBJ_T\n): ObjectEntries<OBJ_T> {\n  return Object.entries(obj) as ObjectEntries<OBJ_T>\n}\n\ntype EntriesType =\n  | [PropertyKey, unknown][]\n  | ReadonlyArray<readonly [PropertyKey, unknown]>\n\n// Existing Utils\ntype DeepWritable<OBJ_T> = { -readonly [P in keyof OBJ_T]: DeepWritable<OBJ_T[P]> }\ntype UnionToIntersection<UNION_T> = // From https://stackoverflow.com/a/50375286\n  (UNION_T extends any ? (k: UNION_T) => void : never) extends (k: infer I) => void\n    ? I\n    : never\n\n// New Utils\ntype UnionObjectFromArrayOfPairs<ARR_T extends EntriesType> =\n  DeepWritable<ARR_T> extends (infer R)[]\n    ? R extends [infer key, infer val]\n      ? { [prop in key & PropertyKey]: val }\n      : never\n    : never\ntype MergeIntersectingObjects<ObjT> = { [key in keyof ObjT]: ObjT[key] }\ntype EntriesToObject<ARR_T extends EntriesType> = MergeIntersectingObjects<\n  UnionToIntersection<UnionObjectFromArrayOfPairs<ARR_T>>\n>\n\nexport function objectFromEntries<ARR_T extends EntriesType>(\n  arr: ARR_T\n): EntriesToObject<ARR_T> {\n  return Object.fromEntries(arr) as EntriesToObject<ARR_T>\n}\n"
  ],
  "version": 3
}