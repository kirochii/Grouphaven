{
  "mappings": "AAAA,cACE,oBACA,oBACA,cACA,iBACK,oBAAoB;AAE3B,YAAY,YAAY;CACtB,SAAS;CACT,YAAY;CACZ,UAAU;CACV,OAAO;AACR;AAID,OAAO,cAAM,eACXA,OAAO,eAAe,WACtBC,kBACC;AAIH,OAAO,cAAM,eACXD,OAAO,eAAe,WACtBE,MAAM,KAAK,WAAW,YAAY,eAAe,aAAa,EAC5D,cACD",
  "names": [
    "theme: GenericTheme | ThemeMask",
    "name?: string",
    "info: Pick<ThemeInfo, 'palette' | 'definition' | 'options'> & {\n    name?: string\n  }"
  ],
  "sources": [
    "src/themeInfo.tsx"
  ],
  "sourcesContent": [
    "import type {\n  CreateThemeOptions,\n  CreateThemePalette,\n  GenericTheme,\n  ThemeMask,\n} from './createThemeTypes'\n\nexport type ThemeInfo = {\n  palette: CreateThemePalette\n  definition: ThemeMask\n  options?: CreateThemeOptions\n  cache: Map<any, any>\n}\n\nconst THEME_INFO = new Map<string, ThemeInfo>()\n\nexport const getThemeInfo = (\n  theme: GenericTheme | ThemeMask,\n  name?: string\n): ThemeInfo | undefined => {\n  return THEME_INFO.get(name || JSON.stringify(theme))\n}\n\nexport const setThemeInfo = (\n  theme: GenericTheme | ThemeMask,\n  info: Pick<ThemeInfo, 'palette' | 'definition' | 'options'> & {\n    name?: string\n  }\n): void => {\n  const next = {\n    ...info,\n    cache: new Map(),\n  }\n  THEME_INFO.set(info.name || JSON.stringify(theme), next)\n  THEME_INFO.set(JSON.stringify(info.definition), next)\n}\n"
  ],
  "version": 3
}