{
  "mappings": "AAAA,cAAc,gBAAgB,cAAc;AAE5C,YAAY,+BAA+B;AAE3C,YAAY,YAAY;AAExB,YAAY,cAAc;CACxB,UAAU;CACV,WAAW,QAAQ;CACnB,mBAAmB,UAAU;CAC7B,eAAe,QAAQ;CACvB,gBAAgB,QAAQ;CACxB,OAAO,QAAQ;CACf;CACA;CACA;CACA;AACD;AAED,YAAY,eAAe,0BAA0B,SAAU;AAE/D,YAAY,gBAAgB,UAAU,WAAWA,UAAU,GAAGC,SAAS,gBAAgB;AAEvF,YAAY,aAAa;CACvB;CACA,MAAM;AACP;AAED,YAAY,qBAAqB,EAC/B,qBAAqB,aACtB;AAED,YAAY;AAEZ,YAAY,WAAW,iCAEtB;AAED,YAAY,eAAe,kBAAkB,cAAc;CACzD,MAAM;CACN;CACA,eAAe,cAAc,EAC3B,OAAO,MACR;AACF;AAED,YAAY,qBAAqB,qBAAqB;CACpD;CACA;AACD;KAEI,kBAAkB,EACrB,OAAO,wBAAyB,EACjC;AAED,YAAY,MAAM,kBACd,kBACA,qBACA,eAAe;AAEnB,YAAY,gBAAgB,kBAAkB,MAAM,SAAS,EAC3D,eACD;AAED,YAAY,qBAAqB,iBAChB,QAChB;AAED,YAAY,gBAAgB,iCACxB,MAAM,SACN,gBAAgB;KAEf,2BAA2B,CAAE;AAElC,YAAY,iBAAiB,iCAAiC,iBAC7C,gBAAgB,QAAQ,iBACxC;AAED,YAAY,sBAAsB,iBACjB,SAChB;AAED,YAAY,kBAAkB,iBACb,aAAa,WAAW,QACxC",
  "names": [
    "template: A",
    "options: MaskOptions"
  ],
  "sources": [
    "src/createThemeTypes.tsx"
  ],
  "sourcesContent": [
    "import type { Variable } from '@tamagui/web'\n\nexport type CreateThemePalette = (string | Variable)[]\n\nexport type ThemeMask = Record<string, string | number>\n\nexport type MaskOptions = {\n  palette?: CreateThemePalette\n  override?: Partial<ThemeMask>\n  overrideStrategy?: 'shift' | 'swap'\n  overrideSwap?: Partial<ThemeMask>\n  overrideShift?: Partial<ThemeMask>\n  skip?: Partial<ThemeMask>\n  strength?: number\n  max?: number\n  min?: number\n  parentName?: string\n}\n\nexport type GenericTheme = { [key: string]: string | Variable }\n\nexport type MaskFunction = <A extends ThemeMask>(template: A, options: MaskOptions) => A\n\nexport type CreateMask = {\n  name: string\n  mask: MaskFunction\n}\n\nexport type CreateThemeOptions = {\n  nonInheritedValues?: GenericTheme\n}\n\nexport type Palette = string[]\n\nexport type Template = {\n  [key: string]: number | string\n}\n\nexport type ThemeUsingMask<Masks = string> = MaskOptions & {\n  mask: Masks\n  avoidNestingWithin?: string[]\n  childOptions?: MaskOptions & {\n    mask?: Masks\n  }\n}\n\nexport type ThemeUsingTemplate = CreateThemeOptions & {\n  palette?: string\n  template: string\n}\n\ntype ThemePreDefined = {\n  theme: { [key: string]: string }\n}\n\nexport type Theme<Masks = string> =\n  | ThemePreDefined\n  | ThemeUsingTemplate\n  | ThemeUsingMask<Masks>\n\nexport type ThemeWithParent<Masks = string> = Theme<Masks> & {\n  parent: string\n}\n\nexport type PaletteDefinitions = {\n  [key: string]: Palette\n}\n\nexport type ThemeDefinition<Masks extends string = string> =\n  | Theme<Masks>\n  | ThemeWithParent<Masks>[]\n\ntype UnionableString = string & {}\n\nexport type ThemeDefinitions<Masks extends string = string> = {\n  [key: string]: ThemeDefinition<Masks | UnionableString>\n}\n\nexport type TemplateDefinitions = {\n  [key: string]: Template\n}\n\nexport type MaskDefinitions = {\n  [key: string]: CreateMask | CreateMask['mask']\n}\n"
  ],
  "version": 3
}