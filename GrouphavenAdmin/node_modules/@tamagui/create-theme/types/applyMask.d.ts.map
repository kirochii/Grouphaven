{
  "mappings": "AACA,cAAc,YAAY,cAAc,aAAa,iBAAiB,oBAAoB;AAC1F,cAAc,iBAAiB,aAAa;AAG5C,OAAO,iBAAS,UAAU,cAAc,eAAe,WACrDA,OAAO,OACPC,MAAM,YACNC,UAAS,aACTC,qBACAC,oBACC;AAqBH,OAAO,iBAAS,mBAAmB,cAAc,eAAe,WAC9DC,MAAM,WACNJ,MAAM,YACNC,UAAS,aACTC,sBACC,YAAY,EACb,OAAO,MACR",
  "names": [
    "theme: Theme",
    "mask: CreateMask",
    "options: MaskOptions",
    "parentName?: string",
    "nextName?: string",
    "info: ThemeInfo"
  ],
  "sources": [
    "src/applyMask.tsx"
  ],
  "sourcesContent": [
    "import { createTheme } from './createTheme'\nimport type { CreateMask, GenericTheme, MaskOptions, ThemeMask } from './createThemeTypes'\nimport type { ThemeInfo } from './themeInfo'\nimport { getThemeInfo, setThemeInfo } from './themeInfo'\n\nexport function applyMask<Theme extends GenericTheme | ThemeMask>(\n  theme: Theme,\n  mask: CreateMask,\n  options: MaskOptions = {},\n  parentName?: string,\n  nextName?: string\n): Theme {\n  const info = getThemeInfo(theme, parentName)\n  if (!info) {\n    throw new Error(\n      process.env.NODE_ENV !== 'production'\n        ? `No info found for theme, you must pass the theme created by createThemeFromPalette directly to extendTheme`\n        : `‚ùå Err2`\n    )\n  }\n\n  const next = applyMaskStateless(info, mask, options, parentName)\n\n  setThemeInfo(next.theme, {\n    definition: next.definition,\n    palette: info.palette,\n    name: nextName,\n  })\n\n  return next.theme as Theme\n}\n\nexport function applyMaskStateless<Theme extends GenericTheme | ThemeMask>(\n  info: ThemeInfo,\n  mask: CreateMask,\n  options: MaskOptions = {},\n  parentName?: string\n): ThemeInfo & {\n  theme: Theme\n} {\n  const skip = {\n    ...options.skip,\n  }\n\n  // skip nonInheritedValues from parent theme\n  if (info.options?.nonInheritedValues) {\n    for (const key in info.options.nonInheritedValues) {\n      skip[key] = 1\n    }\n  }\n\n  // convert theme back to template first\n  const maskOptions = {\n    parentName,\n    palette: info.palette,\n    ...options,\n    skip,\n  }\n\n  const template = mask.mask(info.definition, maskOptions)\n  const theme = createTheme(info.palette, template) as Theme\n\n  return {\n    ...info,\n    cache: new Map(),\n    definition: template,\n    theme,\n  }\n}\n"
  ],
  "version": 3
}