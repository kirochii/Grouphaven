var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var createShallowSetState_exports = {};
__export(createShallowSetState_exports, {
  createShallowSetState: () => createShallowSetState,
  isEqualShallow: () => isEqualShallow,
  mergeIfNotShallowEqual: () => mergeIfNotShallowEqual
});
module.exports = __toCommonJS(createShallowSetState_exports);
var import_react = require("react");
const callImmediate = (cb) => cb();
function createShallowSetState(setter, onlyAllow, transition, debugIn) {
  return (0, import_react.useCallback)(
    (next) => {
      (transition ? import_react.startTransition : callImmediate)(() => {
        setter((prev) => mergeIfNotShallowEqual(prev, next, onlyAllow, debugIn));
      });
    },
    [setter, onlyAllow ? onlyAllow.join("") : "", transition, debugIn]
  );
}
function mergeIfNotShallowEqual(prev, next, onlyAllow, debug) {
  if (onlyAllow) {
    let allowed = {};
    for (const key in next)
      onlyAllow.includes(key) && (allowed[key] = next[key]);
    next = allowed;
  }
  if (!prev || !next || isEqualShallow(prev, next))
    return prev || next;
  if (process.env.NODE_ENV === "development" && debug && (console.info("setStateShallow CHANGE", { prev, next }), debug === "break"))
    debugger;
  return { ...prev, ...next };
}
function isEqualShallow(prev, next) {
  for (const key in next)
    if (prev[key] !== next[key])
      return !1;
  return !0;
}
//# sourceMappingURL=createShallowSetState.js.map
