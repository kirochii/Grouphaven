var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf,
  __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
    for (var name in all) __defProp(target, name, {
      get: all[name],
      enumerable: !0
    });
  },
  __copyProps = (to, from, except, desc) => {
    if (from && typeof from == "object" || typeof from == "function") for (let key of __getOwnPropNames(from)) !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, {
      get: () => from[key],
      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
    });
    return to;
  };
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
    value: mod,
    enumerable: !0
  }) : target, mod)),
  __toCommonJS = mod => __copyProps(__defProp({}, "__esModule", {
    value: !0
  }), mod);
var Theme_exports = {};
__export(Theme_exports, {
  Theme: () => Theme,
  getThemedChildren: () => getThemedChildren
});
module.exports = __toCommonJS(Theme_exports);
var import_constants = require("@tamagui/constants"),
  import_react = __toESM(require("react")),
  import_config = require("../config.cjs"),
  import_createVariable = require("../createVariable.cjs"),
  import_useTheme = require("../hooks/useTheme.cjs"),
  import_useThemeState = require("../hooks/useThemeState.cjs"),
  import_ThemeDebug = require("./ThemeDebug.cjs"),
  import_jsx_runtime = require("react/jsx-runtime");
const empty = {
    className: "",
    style: {}
  },
  Theme = (0, import_react.forwardRef)(function (props, ref) {
    if (props.disable) return props.children;
    const isRoot = !!props._isRoot,
      [_, themeState] = (0, import_useTheme.useThemeWithState)(props, isRoot);
    let finalChildren = props["disable-child-theme"] ? import_react.Children.map(props.children, child => (0, import_react.cloneElement)(child, {
      "data-disable-theme": !0
    })) : props.children;
    if (ref) try {
      import_react.default.Children.only(finalChildren), finalChildren = (0, import_react.cloneElement)(finalChildren, {
        ref
      });
    } catch {}
    const stateRef = (0, import_react.useRef)({
      hasEverThemed: !1
    });
    return getThemedChildren(themeState, finalChildren, props, isRoot, stateRef);
  });
Theme.avoidForwardRef = !0;
function getThemedChildren(themeState, children, props, isRoot = !1, stateRef) {
  const {
      shallow,
      forceClassName
    } = props,
    state = stateRef.current;
  let shouldRenderChildrenWithTheme = state.hasEverThemed || themeState.isNew || isRoot || (0, import_useThemeState.hasThemeUpdatingProps)(props);
  if (process.env.NODE_ENV === "development" && props.debug === "visualize" && (children = /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_ThemeDebug.ThemeDebug, {
    themeState,
    themeProps: props,
    children
  })), !shouldRenderChildrenWithTheme) return children;
  children = /* @__PURE__ */(0, import_jsx_runtime.jsx)(import_useThemeState.ThemeStateContext.Provider, {
    value: themeState.id,
    children
  });
  const {
      isInverse,
      name
    } = themeState,
    requiresExtraWrapper = isInverse || forceClassName;
  if (state.hasEverThemed || (state.hasEverThemed = !0), (requiresExtraWrapper ||
  // if the theme is exactly dark or light, its likely to change between dark/light
  // and that would require wrapping which would re-parent, so to avoid re-parenting do this
  themeState.name === "dark" || themeState.name === "light") && (state.hasEverThemed = "wrapped"), shallow && themeState.parentId) {
    const parentState = (0, import_useThemeState.getThemeState)(themeState.isNew ? themeState.id : themeState.parentId);
    if (!parentState) throw new Error("\u203C\uFE0F010");
    children = import_react.Children.toArray(children).map(child => (0, import_react.isValidElement)(child) ? (0, import_react.cloneElement)(child, void 0, /* @__PURE__ */(0, import_jsx_runtime.jsx)(Theme, {
      name: parentState.name,
      children: child.props.children
    })) : child);
  }
  if (process.env.NODE_ENV === "development" && props.debug && console.warn(" getThemedChildren", {
    requiresExtraWrapper,
    forceClassName,
    themeState,
    state,
    ...getThemeClassNameAndStyle(themeState, props, isRoot)
  }), forceClassName === !1) return children;
  if (import_constants.isWeb) {
    const {
      className,
      style
    } = getThemeClassNameAndStyle(themeState, props, isRoot);
    if (children = /* @__PURE__ */(0, import_jsx_runtime.jsx)("span", {
      className: `${className} _dsp_contents is_Theme`,
      style,
      children
    }), state.hasEverThemed === "wrapped") {
      const className2 = requiresExtraWrapper ? `${isInverse ? name.startsWith("light") ? "t_light is_inversed" : name.startsWith("dark") ? "t_dark is_inversed" : "" : ""} _dsp_contents` : "_dsp_contents";
      children = /* @__PURE__ */(0, import_jsx_runtime.jsx)("span", {
        className: className2,
        children
      });
    }
    return children;
  }
  return children;
}
function getThemeClassNameAndStyle(themeState, props, isRoot = !1) {
  if (!themeState.isNew && !props.forceClassName) return empty;
  const themeColor = themeState?.theme && themeState.isNew ? (0, import_createVariable.variableToString)(themeState.theme.color) : "",
    style = themeColor ? {
      color: themeColor
    } : void 0,
    maxInverses = (0, import_config.getSetting)("maxDarkLightNesting") || 3,
    themeClassName = themeState.inverses >= maxInverses ? themeState.name : themeState.name.replace(schemePrefix, ""),
    className = `${isRoot ? "" : "t_sub_theme"} t_${themeClassName}`;
  return {
    style,
    className
  };
}
const schemePrefix = /^(dark|light)_/;