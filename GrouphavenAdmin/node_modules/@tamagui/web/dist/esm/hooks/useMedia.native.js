import { isServer, isWeb } from "@tamagui/constants";
import { useRef, useSyncExternalStore } from "react";
import { getConfig, getSetting } from "../config.native.js";
import { matchMedia } from "../helpers/matchMedia.native.js";
import { pseudoDescriptors } from "../helpers/pseudoDescriptors.native.js";
var mediaState =
  // development only safeguard
  process.env.NODE_ENV === "development" ? new Proxy({}, {
    get(target, key) {
      if (typeof key == "string" && key[0] === "$" &&
      // dont error on $$typeof
      key[1] !== "$") throw new Error(`Access mediaState should not use "$": ${key}`);
      return Reflect.get(target, key);
    }
  }) : {},
  mediaQueryConfig = {},
  getMedia = function () {
    return mediaState;
  },
  mediaKeys = /* @__PURE__ */new Set(),
  mediaKeyRegex = /\$(platform|theme|group)-/,
  isMediaKey = function (key) {
    if (mediaKeys.has(key)) return !0;
    if (key[0] === "$") {
      var match = key.match(mediaKeyRegex);
      if (match) return match[1];
    }
    return !1;
  },
  initState,
  defaultMediaImportance = Object.keys(pseudoDescriptors).length,
  mediaKeysOrdered,
  getMediaKeyImportance = function (key) {
    if (process.env.NODE_ENV === "development" && key[0] === "$") throw new Error("use short key");
    var conf = getConfig();
    return conf.settings.mediaPropOrder ? defaultMediaImportance : mediaKeysOrdered.indexOf(key) + 100;
  },
  dispose = /* @__PURE__ */new Set(),
  mediaVersion = 0,
  configureMedia = function (config) {
    var {
        media
      } = config,
      mediaQueryDefaultActive = getSetting("mediaQueryDefaultActive");
    if (media) {
      mediaVersion++;
      for (var key in media) mediaState[key] = mediaQueryDefaultActive?.[key] || !1, mediaKeys.add(`$${key}`);
      Object.assign(mediaQueryConfig, media), initState = {
        ...mediaState
      }, mediaKeysOrdered = Object.keys(media), setupMediaListeners();
    }
  };
function unlisten() {
  dispose.forEach(function (cb) {
    return cb();
  }), dispose.clear();
}
var setupVersion = -1;
function setupMediaListeners() {
  var _loop = function (key2) {
    var str = mediaObjectToString(mediaQueryConfig[key2], key2),
      getMatch = function () {
        return matchMedia(str);
      },
      match = getMatch();
    if (!match) throw new Error("\u26A0\uFE0F No match");
    match.addListener(update), dispose.add(function () {
      match.removeListener(update);
    });
    function update() {
      var next = !!getMatch().matches;
      next !== mediaState[key2] && (mediaState = {
        ...mediaState,
        [key2]: next
      }, updateMediaListeners());
    }
    update();
  };
  if (!(isWeb && isServer) && !process.env.IS_STATIC && setupVersion !== mediaVersion) {
    setupVersion = mediaVersion, unlisten();
    for (var key in mediaQueryConfig) _loop(key);
  }
}
var listeners = /* @__PURE__ */new Set();
function updateMediaListeners() {
  listeners.forEach(function (cb) {
    return cb(mediaState);
  });
}
var States = /* @__PURE__ */new WeakMap();
function setMediaShouldUpdate(ref, enabled, keys) {
  var cur = States.get(ref);
  (!cur || cur.enabled !== enabled || keys) && States.set(ref, {
    ...cur,
    enabled,
    keys
  });
}
function subscribe(subscriber) {
  return listeners.add(subscriber), function () {
    listeners.delete(subscriber);
  };
}
function useMedia(cc, debug) {
  var componentState = cc ? States.get(cc) : null,
    internalRef = useRef();
  internalRef.current || (internalRef.current = {
    keys: /* @__PURE__ */new Set()
  });
  var {
    keys,
    lastState = getSetting("disableSSR") ? mediaState : initState
  } = internalRef.current;
  keys.size && keys.clear();
  var state = useSyncExternalStore(subscribe, function () {
    if (componentState?.enabled) return internalRef.current.lastState = mediaState, mediaState;
    var curKeys = componentState?.keys || keys;
    if (!curKeys.size) return lastState;
    var _iteratorNormalCompletion = !0,
      _didIteratorError = !1,
      _iteratorError = void 0;
    try {
      for (var _iterator = curKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
        var key = _step.value;
        if (mediaState[key] !== lastState[key]) return process.env.NODE_ENV === "development" && debug && console.warn("useMedia() \u270D\uFE0F", key, lastState[key], "=>", mediaState[key]), internalRef.current.lastState = mediaState, mediaState;
      }
    } catch (err) {
      _didIteratorError = !0, _iteratorError = err;
    } finally {
      try {
        !_iteratorNormalCompletion && _iterator.return != null && _iterator.return();
      } finally {
        if (_didIteratorError) throw _iteratorError;
      }
    }
    return lastState;
  }, getServerSnapshot);
  return new Proxy(state, {
    get(_, key) {
      return !disableMediaTouch && typeof key == "string" && keys.add(key), Reflect.get(state, key);
    }
  });
}
var getServerSnapshot = function () {
    return initState;
  },
  disableMediaTouch = !1;
function _disableMediaTouch(val) {
  disableMediaTouch = val;
}
function getMediaState(mediaGroups, layout) {
  disableMediaTouch = !0;
  var res;
  try {
    res = Object.fromEntries([...mediaGroups].map(function (mediaKey) {
      return [mediaKey, mediaKeyMatch(mediaKey, layout)];
    }));
  } finally {
    disableMediaTouch = !1;
  }
  return res;
}
var getMediaImportanceIfMoreImportant = function (mediaKey, key, importancesUsed, isSizeMedia) {
  var importance = isSizeMedia && !getSetting("mediaPropOrder") ? getMediaKeyImportance(mediaKey) : defaultMediaImportance;
  return !importancesUsed[key] || importance > importancesUsed[key] ? importance : null;
};
function camelToHyphen(str) {
  return str.replace(/[A-Z]/g, function (m) {
    return `-${m.toLowerCase()}`;
  }).toLowerCase();
}
var cache = /* @__PURE__ */new WeakMap(),
  cachedMediaKeyToQuery = {};
function mediaObjectToString(query, key) {
  if (typeof query == "string") return query;
  if (cache.has(query)) return cache.get(query);
  var res = Object.entries(query).map(function (param) {
    var [feature, value] = param;
    return feature = camelToHyphen(feature), typeof value == "string" ? `(${feature}: ${value})` : (typeof value == "number" && /[height|width]$/.test(feature) && (value = `${value}px`), `(${feature}: ${value})`);
  }).join(" and ");
  return key && (cachedMediaKeyToQuery[key] = res), cache.set(query, res), res;
}
function mediaKeyToQuery(key) {
  return cachedMediaKeyToQuery[key] || mediaObjectToString(mediaQueryConfig[key], key);
}
function mediaKeyMatch(key, dimensions) {
  var mediaQueries = mediaQueryConfig[key],
    result = Object.keys(mediaQueries).every(function (query) {
      var expectedVal = +mediaQueries[query],
        isMax = query.startsWith("max"),
        isWidth = query.endsWith("Width"),
        givenVal = dimensions[isWidth ? "width" : "height"];
      return isMax ? givenVal < expectedVal : givenVal > expectedVal;
    });
  return result;
}
export { _disableMediaTouch, configureMedia, getMedia, getMediaImportanceIfMoreImportant, getMediaKeyImportance, getMediaState, isMediaKey, mediaKeyMatch, mediaKeyToQuery, mediaKeys, mediaObjectToString, mediaQueryConfig, mediaState, setMediaShouldUpdate, setupMediaListeners, updateMediaListeners, useMedia };
//# sourceMappingURL=useMedia.native.js.map
