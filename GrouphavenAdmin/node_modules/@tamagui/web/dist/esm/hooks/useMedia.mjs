import { isServer, isWeb } from "@tamagui/constants";
import { useRef, useSyncExternalStore } from "react";
import { getConfig, getSetting } from "../config.mjs";
import { matchMedia } from "../helpers/matchMedia.mjs";
import { pseudoDescriptors } from "../helpers/pseudoDescriptors.mjs";
let mediaState =
// development only safeguard
process.env.NODE_ENV === "development" ? new Proxy({}, {
  get(target, key) {
    if (typeof key == "string" && key[0] === "$" &&
    // dont error on $$typeof
    key[1] !== "$") throw new Error(`Access mediaState should not use "$": ${key}`);
    return Reflect.get(target, key);
  }
}) : {};
const mediaQueryConfig = {},
  getMedia = () => mediaState,
  mediaKeys = /* @__PURE__ */new Set(),
  mediaKeyRegex = /\$(platform|theme|group)-/,
  isMediaKey = key => {
    if (mediaKeys.has(key)) return !0;
    if (key[0] === "$") {
      const match = key.match(mediaKeyRegex);
      if (match) return match[1];
    }
    return !1;
  };
let initState;
const defaultMediaImportance = Object.keys(pseudoDescriptors).length;
let mediaKeysOrdered;
const getMediaKeyImportance = key => {
    if (process.env.NODE_ENV === "development" && key[0] === "$") throw new Error("use short key");
    return getConfig().settings.mediaPropOrder ? defaultMediaImportance : mediaKeysOrdered.indexOf(key) + 100;
  },
  dispose = /* @__PURE__ */new Set();
let mediaVersion = 0;
const configureMedia = config => {
  const {
      media
    } = config,
    mediaQueryDefaultActive = getSetting("mediaQueryDefaultActive");
  if (media) {
    mediaVersion++;
    for (const key in media) mediaState[key] = mediaQueryDefaultActive?.[key] || !1, mediaKeys.add(`$${key}`);
    Object.assign(mediaQueryConfig, media), initState = {
      ...mediaState
    }, mediaKeysOrdered = Object.keys(media), setupMediaListeners();
  }
};
function unlisten() {
  dispose.forEach(cb => cb()), dispose.clear();
}
let setupVersion = -1;
function setupMediaListeners() {
  if (!(isWeb && isServer) && !process.env.IS_STATIC && setupVersion !== mediaVersion) {
    setupVersion = mediaVersion, unlisten();
    for (const key in mediaQueryConfig) {
      let update = function () {
        const next = !!getMatch().matches;
        next !== mediaState[key] && (mediaState = {
          ...mediaState,
          [key]: next
        }, updateMediaListeners());
      };
      const str = mediaObjectToString(mediaQueryConfig[key], key),
        getMatch = () => matchMedia(str),
        match = getMatch();
      if (!match) throw new Error("\u26A0\uFE0F No match");
      match.addListener(update), dispose.add(() => {
        match.removeListener(update);
      }), update();
    }
  }
}
const listeners = /* @__PURE__ */new Set();
function updateMediaListeners() {
  listeners.forEach(cb => cb(mediaState));
}
const States = /* @__PURE__ */new WeakMap();
function setMediaShouldUpdate(ref, enabled, keys) {
  const cur = States.get(ref);
  (!cur || cur.enabled !== enabled || keys) && States.set(ref, {
    ...cur,
    enabled,
    keys
  });
}
function subscribe(subscriber) {
  return listeners.add(subscriber), () => {
    listeners.delete(subscriber);
  };
}
function useMedia(cc, debug) {
  const componentState = cc ? States.get(cc) : null,
    internalRef = useRef();
  internalRef.current || (internalRef.current = {
    keys: /* @__PURE__ */new Set()
  });
  const {
    keys,
    lastState = getSetting("disableSSR") ? mediaState : initState
  } = internalRef.current;
  keys.size && keys.clear();
  const state = useSyncExternalStore(subscribe, () => {
    if (componentState?.enabled) return internalRef.current.lastState = mediaState, mediaState;
    const curKeys = componentState?.keys || keys;
    if (!curKeys.size) return lastState;
    for (const key of curKeys) if (mediaState[key] !== lastState[key]) return process.env.NODE_ENV === "development" && debug && console.warn("useMedia() \u270D\uFE0F", key, lastState[key], "=>", mediaState[key]), internalRef.current.lastState = mediaState, mediaState;
    return lastState;
  }, getServerSnapshot);
  return new Proxy(state, {
    get(_, key) {
      return !disableMediaTouch && typeof key == "string" && keys.add(key), Reflect.get(state, key);
    }
  });
}
const getServerSnapshot = () => initState;
let disableMediaTouch = !1;
function _disableMediaTouch(val) {
  disableMediaTouch = val;
}
function getMediaState(mediaGroups, layout) {
  disableMediaTouch = !0;
  let res;
  try {
    res = Object.fromEntries([...mediaGroups].map(mediaKey => [mediaKey, mediaKeyMatch(mediaKey, layout)]));
  } finally {
    disableMediaTouch = !1;
  }
  return res;
}
const getMediaImportanceIfMoreImportant = (mediaKey, key, importancesUsed, isSizeMedia) => {
  const importance = isSizeMedia && !getSetting("mediaPropOrder") ? getMediaKeyImportance(mediaKey) : defaultMediaImportance;
  return !importancesUsed[key] || importance > importancesUsed[key] ? importance : null;
};
function camelToHyphen(str) {
  return str.replace(/[A-Z]/g, m => `-${m.toLowerCase()}`).toLowerCase();
}
const cache = /* @__PURE__ */new WeakMap(),
  cachedMediaKeyToQuery = {};
function mediaObjectToString(query, key) {
  if (typeof query == "string") return query;
  if (cache.has(query)) return cache.get(query);
  const res = Object.entries(query).map(([feature, value]) => (feature = camelToHyphen(feature), typeof value == "string" ? `(${feature}: ${value})` : (typeof value == "number" && /[height|width]$/.test(feature) && (value = `${value}px`), `(${feature}: ${value})`))).join(" and ");
  return key && (cachedMediaKeyToQuery[key] = res), cache.set(query, res), res;
}
function mediaKeyToQuery(key) {
  return cachedMediaKeyToQuery[key] || mediaObjectToString(mediaQueryConfig[key], key);
}
function mediaKeyMatch(key, dimensions) {
  const mediaQueries = mediaQueryConfig[key];
  return Object.keys(mediaQueries).every(query => {
    const expectedVal = +mediaQueries[query],
      isMax = query.startsWith("max"),
      isWidth = query.endsWith("Width"),
      givenVal = dimensions[isWidth ? "width" : "height"];
    return isMax ? givenVal < expectedVal : givenVal > expectedVal;
  });
}
export { _disableMediaTouch, configureMedia, getMedia, getMediaImportanceIfMoreImportant, getMediaKeyImportance, getMediaState, isMediaKey, mediaKeyMatch, mediaKeyToQuery, mediaKeys, mediaObjectToString, mediaQueryConfig, mediaState, setMediaShouldUpdate, setupMediaListeners, updateMediaListeners, useMedia };
//# sourceMappingURL=useMedia.mjs.map
