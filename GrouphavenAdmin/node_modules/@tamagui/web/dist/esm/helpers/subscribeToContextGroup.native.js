import { getMediaState } from "../hooks/useMedia.native.js";
import { mergeIfNotShallowEqual } from "./createShallowSetState.native.js";
var subscribeToContextGroup = function (param) {
  var {
    setStateShallow,
    pseudoGroups,
    mediaGroups,
    componentContext,
    state
  } = param;
  if (pseudoGroups || mediaGroups) {
    var _componentContext_groups_subscribe, _componentContext_groups;
    return process.env.NODE_ENV === "development" && !componentContext.groups && console.debug("No context group found"), (_componentContext_groups = componentContext.groups) === null || _componentContext_groups === void 0 || (_componentContext_groups_subscribe = _componentContext_groups.subscribe) === null || _componentContext_groups_subscribe === void 0 ? void 0 : _componentContext_groups_subscribe.call(_componentContext_groups, function (name, param2) {
      var {
          layout,
          pseudo
        } = param2,
        _state_group,
        current = ((_state_group = state.group) === null || _state_group === void 0 ? void 0 : _state_group[name]) || {
          pseudo: {},
          media: {}
        };
      if (pseudo && pseudoGroups?.has(String(name))) Object.assign(current.pseudo, pseudo), persist();else if (layout && mediaGroups) {
        var mediaState = getMediaState(mediaGroups, layout),
          next = mergeIfNotShallowEqual(current.media, mediaState);
        next !== current.media && (Object.assign(current.media, next), persist());
      }
      function persist() {
        var group = {
          ...state.group,
          [name]: current
        };
        setStateShallow({
          group
        });
      }
    });
  }
};
export { subscribeToContextGroup };
//# sourceMappingURL=subscribeToContextGroup.native.js.map
