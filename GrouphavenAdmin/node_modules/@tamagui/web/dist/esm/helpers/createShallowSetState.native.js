import { startTransition, useCallback } from "react";
var callImmediate = function (cb) {
  return cb();
};
function createShallowSetState(setter, onlyAllow, transition, debugIn) {
  return useCallback(function (next) {
    var wrap = transition ? startTransition : callImmediate;
    wrap(function () {
      setter(function (prev) {
        return mergeIfNotShallowEqual(prev, next, onlyAllow, debugIn);
      });
    });
  }, [setter, onlyAllow ? onlyAllow.join("") : "", transition, debugIn]);
}
function mergeIfNotShallowEqual(prev, next, onlyAllow, debug) {
  if (onlyAllow) {
    var allowed = {};
    for (var key in next) onlyAllow.includes(key) && (allowed[key] = next[key]);
    next = allowed;
  }
  if (!prev || !next || isEqualShallow(prev, next)) return prev || next;
  if (process.env.NODE_ENV === "development" && debug && (console.info("setStateShallow CHANGE", {
    prev,
    next
  }), debug === "break")) debugger;
  return {
    ...prev,
    ...next
  };
}
function isEqualShallow(prev, next) {
  for (var key in next) if (prev[key] !== next[key]) return !1;
  return !0;
}
export { createShallowSetState, isEqualShallow, mergeIfNotShallowEqual };
//# sourceMappingURL=createShallowSetState.native.js.map
