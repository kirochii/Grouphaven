import { getMediaState } from "../hooks/useMedia";
import { mergeIfNotShallowEqual } from "./createShallowSetState";
const subscribeToContextGroup = ({
  setStateShallow,
  pseudoGroups,
  mediaGroups,
  componentContext,
  state
}) => {
  if (pseudoGroups || mediaGroups)
    return process.env.NODE_ENV === "development" && !componentContext.groups && console.debug("No context group found"), componentContext.groups?.subscribe?.((name, { layout, pseudo }) => {
      const current = state.group?.[name] || {
        pseudo: {},
        media: {}
      };
      if (pseudo && pseudoGroups?.has(String(name)))
        Object.assign(current.pseudo, pseudo), persist();
      else if (layout && mediaGroups) {
        const mediaState = getMediaState(mediaGroups, layout), next = mergeIfNotShallowEqual(current.media, mediaState);
        next !== current.media && (Object.assign(current.media, next), persist());
      }
      function persist() {
        const group = {
          ...state.group,
          [name]: current
        };
        setStateShallow({
          group
        });
      }
    });
};
export {
  subscribeToContextGroup
};
//# sourceMappingURL=subscribeToContextGroup.js.map
