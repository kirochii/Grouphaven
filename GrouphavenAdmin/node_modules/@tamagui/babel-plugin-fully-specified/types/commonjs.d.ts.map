{
  "mappings": "AAGA,eAAe,SAAS,qBAAqBA,WAAW,MAAM",
  "names": [
    "api: any"
  ],
  "sources": [
    "src/commonjs.ts"
  ],
  "sourcesContent": [
    "import { existsSync, lstatSync } from 'node:fs'\nimport { dirname, extname, resolve } from 'node:path'\n\nexport default function fullySpecifyCommonJS(api: any): babel.PluginObj {\n  api.assertVersion(7)\n\n  return {\n    name: 'babel-plugin-fully-specified-cjs',\n    visitor: {\n      CallExpression(path, state) {\n        const callee = path.get('callee')\n\n        if (\n          callee.isIdentifier({ name: 'require' }) &&\n          path.node.arguments.length === 1\n        ) {\n          const arg = path.node.arguments[0]\n          if (arg.type === 'StringLiteral') {\n            let moduleSpecifier = arg.value\n\n            // Skip built-in modules and node_modules\n            if (moduleSpecifier.startsWith('.') || moduleSpecifier.startsWith('/')) {\n              const filePath = state.file.opts.filename\n              if (!filePath) return // Cannot determine file path\n\n              const fileDir = dirname(filePath)\n              const cjsExtension = '.cjs'\n              const jsExtension = '.js'\n\n              // Check if moduleSpecifier already has an extension\n              if (!extname(moduleSpecifier)) {\n                const resolvedPath = resolve(fileDir, moduleSpecifier)\n                let newModuleSpecifier = moduleSpecifier\n\n                // Check if the moduleSpecifier is a directory with an index.cjs file\n                if (isLocalDirectory(resolvedPath)) {\n                  const indexPath = resolve(resolvedPath, 'index' + jsExtension)\n                  if (existsSync(indexPath)) {\n                    // Append '/' if not present\n                    if (!newModuleSpecifier.endsWith('/')) {\n                      newModuleSpecifier += '/'\n                    }\n                    newModuleSpecifier += 'index' + cjsExtension\n                    arg.value = newModuleSpecifier\n                    return\n                  }\n                }\n\n                // Check if the moduleSpecifier.cjs file exists\n                const filePathWithJs = resolvedPath + jsExtension\n                if (existsSync(filePathWithJs)) {\n                  newModuleSpecifier += cjsExtension\n                  arg.value = newModuleSpecifier\n                  return\n                }\n              }\n            }\n          }\n        }\n      },\n    },\n  } satisfies babel.PluginObj\n}\n\nfunction isLocalDirectory(absolutePath) {\n  return existsSync(absolutePath) && lstatSync(absolutePath).isDirectory()\n}\n"
  ],
  "version": 3
}