{
  "mappings": ";;;KAUK,OAAO;CACV;CACA;AACD;AAOD,OAAO,iBAAS,iCAAiCA,MAAM;AAiBvD,OAAO,iBAAS,oBAAoB,EAClC,aACuB,GAAtB,EAAE,cAAc,KAAM,IAAQ",
  "names": [
    "next: Size"
  ],
  "sources": [
    "src/index.ts"
  ],
  "sourcesContent": [
    "import React from 'react'\nimport { isWeb } from '@tamagui/constants'\n\nimport type { ScaledSize } from 'react-native'\nimport { Dimensions } from 'react-native'\n\n/**\n * SSR safe useWindowDimensions\n */\n\ntype Size = {\n  width: number\n  height: number\n}\n\nconst initialValue: Size = {\n  height: 800,\n  width: 600,\n}\n\nexport function configureInitialWindowDimensions(next: Size): void {\n  Object.assign(initialValue, next)\n}\n\nDimensions.addEventListener('change', () => {\n  cbs.forEach((cb) => cb(window))\n})\n\nconst cbs = new Set<Function>()\n\ntype WindowSizeListener = ({ window }: { window: ScaledSize }) => void\n\nfunction subscribe(cb: WindowSizeListener) {\n  cbs.add(cb)\n  return () => cbs.delete(cb)\n}\n\nexport function useWindowDimensions({\n  serverValue = initialValue,\n}: { serverValue?: Size } = {}): Size {\n  return React.useSyncExternalStore(\n    subscribe,\n    () => Dimensions.get('window'),\n    () => (isWeb ? serverValue : Dimensions.get('window'))\n  )\n}\n"
  ],
  "version": 3
}